{"list":[{"title":"events~event:Broadcast","link":"<a href=\"events.html#~event:Broadcast\">Broadcast</a>","description":"<p>Fired when .</p>"},{"title":"events~event:ElectionTimeout","link":"<a href=\"events.html#~event:ElectionTimeout\">ElectionTimeout</a>","description":"<p>Fired when a new election should begin.</p>"},{"title":"events~event:LogCommit","link":"<a href=\"events.html#~event:LogCommit\">LogCommit</a>","description":"<p>Fired when .</p>"},{"title":"events~event:LogRequest","link":"<a href=\"events.html#~event:LogRequest\">LogRequest</a>","description":"<p>Fired when .</p>"},{"title":"events~event:LogResponse","link":"<a href=\"events.html#~event:LogResponse\">LogResponse</a>","description":"<p>Fired when .</p>"},{"title":"events~event:ReplicationTimeout","link":"<a href=\"events.html#~event:ReplicationTimeout\">ReplicationTimeout</a>","description":"<p>Fired when .</p>"},{"title":"events~event:VoteRequest","link":"<a href=\"events.html#~event:VoteRequest\">VoteRequest</a>","description":"<p>Fired when .</p>"},{"title":"events~event:VoteResponse","link":"<a href=\"events.html#~event:VoteResponse\">VoteResponse</a>","description":"<p>Fired when .</p>"},{"title":"module:brig","link":"<a href=\"module-brig.html\">brig</a>"},{"title":"module:brig.consensus","link":"<a href=\"module-brig.html#.consensus\">consensus</a>"},{"title":"module:brig.events","link":"<a href=\"module-brig.html#.events\">events</a>"},{"title":"module:brig.log","link":"<a href=\"module-brig.html#.log\">log</a>"},{"title":"module:brig.messages","link":"<a href=\"module-brig.html#.messages\">messages</a>"},{"title":"module:brig.roles","link":"<a href=\"module-brig.html#.roles\">roles</a>"},{"title":"module:brig/consensus","link":"<a href=\"module-brig_consensus.html\">brig/consensus</a>"},{"title":"module:brig/consensus~NodeStateMachine","link":"<a href=\"module-brig_consensus-NodeStateMachine.html\">NodeStateMachine</a>"},{"title":"module:brig/consensus~NodeStateMachine#setCurrentRole","link":"<a href=\"module-brig_consensus-NodeStateMachine.html#setCurrentRole\">setCurrentRole</a>","description":"<p>Sets the current role to the given symbol.</p>"},{"title":"module:brig/consensus~NodeStateMachine#toNextTerm","link":"<a href=\"module-brig_consensus-NodeStateMachine.html#toNextTerm\">toNextTerm</a>","description":"<p>Increments the current term by 1.</p>"},{"title":"module:brig/consensus~NodeStateMachine#voteFor","link":"<a href=\"module-brig_consensus-NodeStateMachine.html#voteFor\">voteFor</a>","description":"<p>Sets the current vote for the given ID.</p>"},{"title":"module:brig/consensus~NodeStateMachine.lastTerm","link":"<a href=\"module-brig_consensus-NodeStateMachine.html#.lastTerm\">lastTerm</a>","description":"<p>The last term number.</p>"},{"title":"module:brig/consensus~Peer","link":"<a href=\"module-brig_consensus-Peer.html\">Peer</a>"},{"title":"module:brig/consensus~RaftConsensus","link":"<a href=\"module-brig_consensus-RaftConsensus.html\">RaftConsensus</a>"},{"title":"module:brig/consensus~RaftConsensus#acks","link":"<a href=\"module-brig_consensus-RaftConsensus.html#acks\">acks</a>","description":"<p>The number of nodes whose ackedLength is greater than or equal to x.</p>"},{"title":"module:brig/consensus~RaftConsensus#appendEntries","link":"<a href=\"module-brig_consensus-RaftConsensus.html#appendEntries\">appendEntries</a>","description":"<p>AppendEntries is a helper function that appends the suffix log entries to the log of the follower.\nHere we check whether the follower has the same suffix log entries as the leader. If not, the follower will remove all the log entries after prefix from its log, and append the suffix log entries from leader to its log.</p>"},{"title":"module:brig/consensus~RaftConsensus#commitLogEntries","link":"<a href=\"module-brig_consensus-RaftConsensus.html#commitLogEntries\">commitLogEntries</a>","description":"<p>If the leader receives a majority of acknowledgements for a log entry, it will commit the log entry.</p>"},{"title":"module:brig/consensus~RaftConsensus#getPeer","link":"<a href=\"module-brig_consensus-RaftConsensus.html#getPeer\">getPeer</a>","description":"<p>Get peer from list by ID.</p>"},{"title":"module:brig/consensus~RaftConsensus#handleBroadcast","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleBroadcast\">handleBroadcast</a>","description":"<p>When the application layer triggers a broadcast, the leader will append the broadcast message to its log, and send the log entry to all followers. If the current node is not a leader, it will forward the broadcast message to the leader.</p>"},{"title":"module:brig/consensus~RaftConsensus#handleLogRequest","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleLogRequest\">handleLogRequest</a>","description":"<p>When a follower receives a synchronization message from the leader, it will perform the following steps:</p>\n<ol>\n<li>The follower will check whether the log is consistent with the log entries that the leader believes the follower has. If not, the follower will reject the synchronization request.</li>\n<li>If the log is consistent, the follower will append the suffix log entries to its own log.</li>\n<li>The follower will check whether the leader has committed any log entries. If so, the follower will commit the log entries that the leader has committed.\nTo check whether the log is consistent, the follower will compare the term of the last log entry in the prefix with leader’s prefix_term. If they are not equal, the log is inconsistent. It is true due to a property of Raft: if two nodes have the same log term at the same index, then they have the same log entries at and before that index. Here we don’t give the proof of this property, but you can find it in the original paper.</li>\n</ol>"},{"title":"module:brig/consensus~RaftConsensus#handleLogResponse","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleLogResponse\">handleLogResponse</a>","description":"<p>When the leader receives a log response from a follower, it will perform the following steps:</p>\n<ol>\n<li>If the synchronization is successful, the leader will update ackedLength and sentLength of the follower.</li>\n<li>If the synchronization is failed, the leader will decrease sentLength of the follower by 1, and try again.</li>\n</ol>"},{"title":"module:brig/consensus~RaftConsensus#handleReplicateLog","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleReplicateLog\">handleReplicateLog</a>","description":"<p>When the replication timer expires, the leader will synchronize its log with all followers. The synchronization message also serves as a heartbeat message.</p>"},{"title":"module:brig/consensus~RaftConsensus#handleVoteRequest","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleVoteRequest\">handleVoteRequest</a>","description":"<p>When node A receives a voting request from node B, it will perform the following steps:</p>\n<ol>\n<li>Check if the term of B is greater than or equal the current term of A. If not, A will reject the voting request, since voting for B might result in multiple leaders in B’s term.</li>\n<li>Check if the log of B is more or equal up-to-date than the log of A. If not, A will reject the voting request, since voting for B might result in log entries being lost.</li>\n<li>Check if A has already voted for another candidate in the current term. If so, A will reject the voting request, since voting for B might result in multiple leaders in the current term.</li>\n</ol>"},{"title":"module:brig/consensus~RaftConsensus#handleVoteResponse","link":"<a href=\"module-brig_consensus-RaftConsensus.html#handleVoteResponse\">handleVoteResponse</a>","description":"<p>Upon receiving voting responses, a node should check whether it has received a majority of votes. If so, it should transition to the role of leader. Otherwise, it should remain a candidate.</p>"},{"title":"module:brig/consensus~RaftConsensus#replicateLog","link":"<a href=\"module-brig_consensus-RaftConsensus.html#replicateLog\">replicateLog</a>","description":"<p>ReplicateLog is a helper function that synchronizes the log of the leader with a follower.\nThe simplest way to synchronize the log is to send the entire log to the follower. However, this is inefficient. As mentioned earlier, the leader assumes that the log of the follower is the same as its own log when it becomes a leader. Therefore, the leader only needs to send the log entries that the follower does not have.\n<code>sentLength[follower] := log.length // the node assumes that the log of the follower is the same as its own log</code>\nThe leader maintains a variable sentLength for each follower. sentLength[follower] denotes the length of the log that the leader believes the follower has. When the leader synchronizes the logs with the follower, it will send the log entries after sentLength[follower]. If the synchronization is failed, the leader will decrease sentLength[follower] by 1, and try again.</p>"},{"title":"module:brig/consensus~RaftConsensus#requestVotes","link":"<a href=\"module-brig_consensus-RaftConsensus.html#requestVotes\">requestVotes</a>","description":"<p>Requests votes from each peer.</p>"},{"title":"module:brig/consensus~RaftConsensus#resetElectionTimer","link":"<a href=\"module-brig_consensus-RaftConsensus.html#resetElectionTimer\">resetElectionTimer</a>","description":"<p>Resets the election timeout</p>"},{"title":"module:brig/consensus~RaftConsensus#startElection","link":"<a href=\"module-brig_consensus-RaftConsensus.html#startElection\">startElection</a>","description":"<p>Each node has a election timer, which is reset when receving the heartbeat from its leader.\nWhen the Election Timer expires, the follower will transition to the role of “candidate”. Following this transition, it will proceed to send voting requests to all nodes.</p>"},{"title":"module:brig/events","link":"<a href=\"module-brig_events.html\">brig/events</a>"},{"title":"module:brig/log","link":"<a href=\"module-brig_log.html\">brig/log</a>"},{"title":"module:brig/log~LogEntry","link":"<a href=\"module-brig_log-LogEntry.html\">LogEntry</a>"},{"title":"module:brig/log~RaftLog","link":"<a href=\"module-brig_log-RaftLog.html\">RaftLog</a>"},{"title":"module:brig/log~RaftLog#append","link":"<a href=\"module-brig_log-RaftLog.html#append\">append</a>"},{"title":"module:brig/messages","link":"<a href=\"module-brig_messages.html\">brig/messages</a>"},{"title":"module:brig/messages~LogRequestMessage","link":"<a href=\"module-brig_messages-LogRequestMessage.html\">LogRequestMessage</a>"},{"title":"module:brig/messages~LogResponseMessage","link":"<a href=\"module-brig_messages-LogResponseMessage.html\">LogResponseMessage</a>"},{"title":"module:brig/messages~VoteRequestMessage","link":"<a href=\"module-brig_messages-VoteRequestMessage.html\">VoteRequestMessage</a>"},{"title":"module:brig/messages~VoteResponseMessage","link":"<a href=\"module-brig_messages-VoteResponseMessage.html\">VoteResponseMessage</a>"},{"title":"module:brig/roles","link":"<a href=\"module-brig_roles.html\">brig/roles</a>","description":"<p>Symbols for different modes/roles a node can be in</p>"},{"title":"module:brig/roles.Candidate","link":"<a href=\"module-brig_roles.html#.Candidate\">Candidate</a>"},{"title":"module:brig/roles.Follower","link":"<a href=\"module-brig_roles.html#.Follower\">Follower</a>"},{"title":"module:brig/roles.Leader","link":"<a href=\"module-brig_roles.html#.Leader\">Leader</a>"}]}