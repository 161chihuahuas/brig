{"list":[{"title":"event:Broadcast","link":"<a href=\"module-brig_events.html#~event:Broadcast\">Broadcast</a>","description":"<p>Fired when the application layer wishes to broadcast a log entry to the\nnetwork.</p>"},{"title":"event:Debug","link":"<a href=\"module-brig_events.html#~event:Debug\">Debug</a>","description":"<p>Fired when a debug message is loggable.</p>"},{"title":"event:ElectionTimeout","link":"<a href=\"module-brig_events.html#~event:ElectionTimeout\">ElectionTimeout</a>","description":"<p>Fired when a new election should begin.</p>"},{"title":"event:LogCommit","link":"<a href=\"module-brig_events.html#~event:LogCommit\">LogCommit</a>","description":"<p>Fired when an entry is commited to the log.</p>"},{"title":"event:LogRequest","link":"<a href=\"module-brig_events.html#~event:LogRequest\">LogRequest</a>","description":"<p>Fired when a node requests entries to be appended to the log.</p>"},{"title":"event:LogResponse","link":"<a href=\"module-brig_events.html#~event:LogResponse\">LogResponse</a>","description":"<p>Fired when a response to append entries is received.</p>"},{"title":"event:ReplicationTimeout","link":"<a href=\"module-brig_events.html#~event:ReplicationTimeout\">ReplicationTimeout</a>","description":"<p>Fired when node should replicate log to all followers.</p>"},{"title":"event:RoleChanged","link":"<a href=\"module-brig_events.html#~event:RoleChanged\">RoleChanged</a>","description":"<p>Fired when the role is changed.</p>"},{"title":"event:VoteRequest","link":"<a href=\"module-brig_events.html#~event:VoteRequest\">VoteRequest</a>","description":"<p>Fired when a vote request is received.</p>"},{"title":"event:VoteResponse","link":"<a href=\"module-brig_events.html#~event:VoteResponse\">VoteResponse</a>","description":"<p>Fired when a reponse is received for a vote request.</p>"},{"title":"module:brig","link":"<a href=\"module-brig.html\">brig</a>"},{"title":"module:brig.consensus","link":"<a href=\"module-brig.html#.consensus\">consensus</a>","description":"<p>{@link module:brig/consensus}</p>"},{"title":"module:brig.events","link":"<a href=\"module-brig.html#.events\">events</a>","description":"<p>{@link module:brig/events}</p>"},{"title":"module:brig.log","link":"<a href=\"module-brig.html#.log\">log</a>","description":"<p>{@link module:brig/log}</p>"},{"title":"module:brig.messages","link":"<a href=\"module-brig.html#.messages\">messages</a>","description":"<p>{@link module:brig/messages}</p>"},{"title":"module:brig.roles","link":"<a href=\"module-brig.html#.roles\">roles</a>","description":"<p>{@link module:brig/roles}</p>"},{"title":"module:brig/consensus","link":"<a href=\"module-brig_consensus.html\">brig/consensus</a>"},{"title":"module:brig/consensus~Consensus","link":"<a href=\"module-brig_consensus-Consensus.html\">Consensus</a>","description":"<p>Primary brig interface. A synchronized, crash-fault-tolerant state\nmachine consensus layer. Implements a Raft-like protocol.</p>"},{"title":"module:brig/consensus~Consensus#acks","link":"<a href=\"module-brig_consensus-Consensus.html#acks\">acks</a>","description":"<p>The number of nodes whose <code>ackedLength</code> is greater than or equal to x.</p>"},{"title":"module:brig/consensus~Consensus#addPeer","link":"<a href=\"module-brig_consensus-Consensus.html#addPeer\">addPeer</a>","description":"<p>Adds a peer to the cluster.</p>"},{"title":"module:brig/consensus~Consensus#appendEntries","link":"<a href=\"module-brig_consensus-Consensus.html#appendEntries\">appendEntries</a>","description":"<p>Appends the suffix log entries to the log of the follower. Here we check\nwhether the follower has the same suffix log entries as the leader. If\nnot, the follower will remove all the log entries after prefix from its\nlog, and append the suffix log entries from leader to its log.</p>"},{"title":"module:brig/consensus~Consensus#broadcast","link":"<a href=\"module-brig_consensus-Consensus.html#broadcast\">broadcast</a>","description":"<p>Helper function for broadcasting a log entry.</p>"},{"title":"module:brig/consensus~Consensus#commitLogEntries","link":"<a href=\"module-brig_consensus-Consensus.html#commitLogEntries\">commitLogEntries</a>","description":"<p>If the leader receives a majority of acknowledgements for a log entry, it\nwill commit the log entry.</p>"},{"title":"module:brig/consensus~Consensus#getPeer","link":"<a href=\"module-brig_consensus-Consensus.html#getPeer\">getPeer</a>","description":"<p>Get peer from list by ID.</p>"},{"title":"module:brig/consensus~Consensus#handleBroadcast","link":"<a href=\"module-brig_consensus-Consensus.html#handleBroadcast\">handleBroadcast</a>","description":"<p>When the application layer triggers a broadcast, the leader will append\nthe broadcast message to its log, and send the log entry to all followers.\nIf the current node is not a leader, it will forward the broadcast message\nto the leader.</p>"},{"title":"module:brig/consensus~Consensus#handleLogRequest","link":"<a href=\"module-brig_consensus-Consensus.html#handleLogRequest\">handleLogRequest</a>","description":"<p>When a follower receives a synchronization message from the leader, it\nwill perform the following steps:</p>\n<ol>\n<li>\n<p>The follower will check whether the log is consistent with the log\nentries that the leader believes the follower has. If not, the follower\nwill reject the synchronization request.</p>\n</li>\n<li>\n<p>If the log is consistent, the follower will append the suffix log\nentries to its own log.</p>\n</li>\n<li>\n<p>The follower will check whether the leader has committed any log\nentries. If so, the follower will commit the log entries that the leader\nhas committed.</p>\n</li>\n</ol>\n<p>To check whether the log is consistent, the follower will compare the term\nof the last log entry in the prefix with leader’s prefix_term. If they are\nnot equal, the log is inconsistent. It is true due to a property of Raft:\nif two nodes have the same log term at the same index, then they have the\nsame log entries at and before that index. Here we don’t give the proof of\nthis property, but you can find it in the original paper.</p>"},{"title":"module:brig/consensus~Consensus#handleLogResponse","link":"<a href=\"module-brig_consensus-Consensus.html#handleLogResponse\">handleLogResponse</a>","description":"<p>When the leader receives a log response from a follower, it will perform\nthe following steps:</p>\n<ol>\n<li>\n<p>If the synchronization is successful, the leader will update\n<code>ackedLength</code> and <code>sentLength</code> of the follower.</p>\n</li>\n<li>\n<p>If the synchronization is failed, the leader will decrease <code>sentLength</code>\nof the follower by 1, and try again.</p>\n</li>\n</ol>"},{"title":"module:brig/consensus~Consensus#handleReplicateLog","link":"<a href=\"module-brig_consensus-Consensus.html#handleReplicateLog\">handleReplicateLog</a>","description":"<p>When the replication timer expires, the leader will synchronize its log\nwith all followers. The synchronization message also serves as a heartbeat\nmessage.</p>"},{"title":"module:brig/consensus~Consensus#handleVoteRequest","link":"<a href=\"module-brig_consensus-Consensus.html#handleVoteRequest\">handleVoteRequest</a>","description":"<p>When node A receives a voting request from node B, it will perform the\nfollowing steps:</p>\n<ol>\n<li>\n<p>Check if the term of B is greater than or equal the current term of A.\nIf not, A will reject the voting request, since voting for B might result\nin multiple leaders in B’s term.</p>\n</li>\n<li>\n<p>Check if the log of B is more or equal up-to-date than the log of A.\nIf not, A will reject the voting request, since voting for B might result\nin log entries being lost.</p>\n</li>\n<li>\n<p>Check if A has already voted for another candidate in the current term.\nIf so, A will reject the voting request, since voting for B might result\nin multiple leaders in the current term.</p>\n</li>\n</ol>"},{"title":"module:brig/consensus~Consensus#handleVoteResponse","link":"<a href=\"module-brig_consensus-Consensus.html#handleVoteResponse\">handleVoteResponse</a>","description":"<p>Upon receiving voting responses, a node should check whether it has\nreceived a majority of votes. If so, it should transition to the role of\nleader. Otherwise, it should remain a candidate.</p>"},{"title":"module:brig/consensus~Consensus#id","link":"<a href=\"module-brig_consensus-Consensus.html#id\">id</a>"},{"title":"module:brig/consensus~Consensus#peers","link":"<a href=\"module-brig_consensus-Consensus.html#peers\">peers</a>"},{"title":"module:brig/consensus~Consensus#replicateLog","link":"<a href=\"module-brig_consensus-Consensus.html#replicateLog\">replicateLog</a>","description":"<p>Helper function that synchronizes the log of the leader with a follower.\nThe simplest way to synchronize the log is to send the entire log to the\nfollower. However, this is inefficient. As mentioned earlier, the leader\nassumes that the log of the follower is the same as its own log when it\nbecomes a leader. Therefore, the leader only needs to send the log entries\nthat the follower does not have.</p>\n<pre class=\"prettyprint source\"><code>sentLength[follower] := log.length \n// the node assumes that the log of the follower is the same as its own log\n</code></pre>\n<p>The leader maintains a variable <code>sentLength</code> for each follower.\n<code>sentLength[follower]</code> denotes the length of the log that the leader\nbelieves the follower has. When the leader synchronizes the logs with the\nfollower, it will send the log entries after <code>sentLength[follower]</code>. If\nthe synchronization is failed, the leader will decrease\n<code>sentLength[follower]</code> by 1, and try again.</p>"},{"title":"module:brig/consensus~Consensus#requestVotes","link":"<a href=\"module-brig_consensus-Consensus.html#requestVotes\">requestVotes</a>","description":"<p>Requests votes from each peer.</p>"},{"title":"module:brig/consensus~Consensus#resetElectionTimer","link":"<a href=\"module-brig_consensus-Consensus.html#resetElectionTimer\">resetElectionTimer</a>","description":"<p>Resets the election timeout.</p>"},{"title":"module:brig/consensus~Consensus#startElection","link":"<a href=\"module-brig_consensus-Consensus.html#startElection\">startElection</a>","description":"<p>Each node has a election timer, which is reset when receving the heartbeat\nfrom its leader. When the Election Timer expires, the follower will\ntransition to the role of “candidate”. Following this transition, it will\nproceed to send voting requests to all nodes.</p>"},{"title":"module:brig/consensus~Consensus#state","link":"<a href=\"module-brig_consensus-Consensus.html#state\">state</a>"},{"title":"module:brig/consensus~Consensus.getElectionTimeoutMs","link":"<a href=\"module-brig_consensus-Consensus.html#.getElectionTimeoutMs\">getElectionTimeoutMs</a>","description":"<p>Election timeout in milliseconds plus a randomized additional time.</p>"},{"title":"module:brig/consensus~Peer","link":"<a href=\"module-brig_consensus-Peer.html\">Peer</a>","description":"<p>Abstract representation of a peer. Accepts any objectMode=true Duplex\nstream and a unique ID. Messages sent to peer will be written to the\nstream. {@link module:brig/consensus~Consensus} expects messages from\npeers to be read from this stream.</p>"},{"title":"module:brig/events","link":"<a href=\"module-brig_events.html\">brig/events</a>"},{"title":"module:brig/log","link":"<a href=\"module-brig_log.html\">brig/log</a>"},{"title":"module:brig/log~Log","link":"<a href=\"module-brig_log-Log.html\">Log</a>","description":"<p>Serializable wrapper for a list of {@link module:brig/log/LogEntry}s.</p>"},{"title":"module:brig/log~Log#append","link":"<a href=\"module-brig_log-Log.html#append\">append</a>","description":"<p>Appends the entry to the log.</p>"},{"title":"module:brig/log~Log#getEntriesAfterIndex","link":"<a href=\"module-brig_log-Log.html#getEntriesAfterIndex\">getEntriesAfterIndex</a>","description":"<p>Get all the log entries after the supplied index.</p>"},{"title":"module:brig/log~Log#getEntryByIndex","link":"<a href=\"module-brig_log-Log.html#getEntryByIndex\">getEntryByIndex</a>","description":"<p>Get the log entry at the supplied index.</p>"},{"title":"module:brig/log~LogEntry","link":"<a href=\"module-brig_log-LogEntry.html\">LogEntry</a>","description":"<p>Serializable wrapper for an arbitrary JSON object paired with the election\nterm during which it was synchronized.</p>"},{"title":"module:brig/log~LogState","link":"<a href=\"module-brig_log-LogState.html\">LogState</a>","description":"<p>State machine synchronized by {@link module:brig/consensus~Consensus}.</p>"},{"title":"module:brig/log~LogState#lastTerm","link":"<a href=\"module-brig_log-LogState.html#lastTerm\">lastTerm</a>","description":"<p>The last term number.</p>"},{"title":"module:brig/log~LogState#setCurrentRole","link":"<a href=\"module-brig_log-LogState.html#setCurrentRole\">setCurrentRole</a>","description":"<p>Sets the current role to the given symbol.</p>"},{"title":"module:brig/log~LogState#toNextTerm","link":"<a href=\"module-brig_log-LogState.html#toNextTerm\">toNextTerm</a>","description":"<p>Increments the current term by 1.</p>"},{"title":"module:brig/log~LogState#voteFor","link":"<a href=\"module-brig_log-LogState.html#voteFor\">voteFor</a>","description":"<p>Sets the current vote for the given ID.</p>"},{"title":"module:brig/messages","link":"<a href=\"module-brig_messages.html\">brig/messages</a>"},{"title":"module:brig/messages~LogRequestMessage","link":"<a href=\"module-brig_messages-LogRequestMessage.html\">LogRequestMessage</a>"},{"title":"module:brig/messages~LogRequestMessageOptions","link":"<a href=\"module-brig_messages.html#~LogRequestMessageOptions\">LogRequestMessageOptions</a>"},{"title":"module:brig/messages~LogResponseMessage","link":"<a href=\"module-brig_messages-LogResponseMessage.html\">LogResponseMessage</a>"},{"title":"module:brig/messages~LogResponseMessageOptions","link":"<a href=\"module-brig_messages.html#~LogResponseMessageOptions\">LogResponseMessageOptions</a>"},{"title":"module:brig/messages~VoteRequestMessage","link":"<a href=\"module-brig_messages-VoteRequestMessage.html\">VoteRequestMessage</a>"},{"title":"module:brig/messages~VoteRequestMessageOptions","link":"<a href=\"module-brig_messages.html#~VoteRequestMessageOptions\">VoteRequestMessageOptions</a>"},{"title":"module:brig/messages~VoteResponseMessage","link":"<a href=\"module-brig_messages-VoteResponseMessage.html\">VoteResponseMessage</a>"},{"title":"module:brig/messages~VoteResponseMessageOptions","link":"<a href=\"module-brig_messages.html#~VoteResponseMessageOptions\">VoteResponseMessageOptions</a>"},{"title":"module:brig/roles","link":"<a href=\"module-brig_roles.html\">brig/roles</a>","description":"<p>Symbols for different modes/roles a node can be in.</p>"},{"title":"module:brig/roles.Candidate","link":"<a href=\"module-brig_roles.html#.Candidate\">Candidate</a>","description":"<p>The node did not receive a heartbeat before the next election and is now\nrequesting votes from peers.</p>"},{"title":"module:brig/roles.Follower","link":"<a href=\"module-brig_roles.html#.Follower\">Follower</a>","description":"<p>The node synchronizes and appends entries via leader.</p>"},{"title":"module:brig/roles.Leader","link":"<a href=\"module-brig_roles.html#.Leader\">Leader</a>","description":"<p>The node was elected leader and relays append entry requests to peers.</p>"}]}